name: 'Build & Deploy WebGL'

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: 'build'
  cancel-in-progress: true
  
jobs:
  build:
    name: 'Build and deploy'
    runs-on: [self-hosted, linux]
    environment:
        name: "${{ (contains(github.event.head_commit.message, '[prod]') || github.event_name == 'workflow_dispatch') && 'Production' || 'Development' }}"
        url: "${{ steps.deploy.outputs.url }}"
    if: "contains(github.event.head_commit.message, '[deploy]') || github.event_name == 'workflow_dispatch'"
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v2

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v2
        with:
          path: the-forest-spirits/Library
          key: Library-${{ hashFiles('the-forest-spirits/Assets/**', 'the-forest-spirits/Packages/**', 'the-forest-spirits/ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL
          projectPath: ./the-forest-spirits

      # Output
      - uses: actions/upload-artifact@v2
        with:
          name: Build
          path: build

      # Deploy
      - name: Deploy
        id: deploy
        run: |-
          npm install -g vercel
          cd build/WebGL/WebGL
          sudo cp -r ../../../.vercel-for-build ./.vercel
          sudo mv ./.vercel/config.json ./vercel.json
          vercel deploy --token ${{ secrets.JONA_VERCEL_TOKEN }} ${{ (contains(github.event.head_commit.message, '[prod]') && github.event_name != 'workflow_dispatch') && '--prod' || '' }} | tee ${{ runner.temp }}/_OUT_URL.txt
          echo "url=$(cat ${{ runner.temp }}/_OUT_URL.txt)" >> "$GITHUB_OUTPUT"
          rm ${{ runner.temp }}/_OUT_URL.txt
